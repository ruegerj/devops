version: "3"

tasks:
  run:
    desc: Launches the api locally with the environment variables provided in .env
    dotenv: [.env]
    cmds:
      - go run .

  build:
    desc: Builds the binary for the current host OS and architecture
    cmds:
      - go build -o bin/api .
    generates:
      - bin/api

  lint:
    desc: Runs static linters (golangci-lint)
    cmds:
      - golangci-lint run

  test:
    desc: Runs all tests of the project
    cmds:
      - task: test:unit
      - task: test:e2e

  test:unit:
    desc: Runs only the unit tests of the project
    cmds:
      - go test -v ./...

  test:e2e:
    desc: Runy only the e2e tests of the project
    cmds:
      - go test -v -tags e2e ./tests/e2e/...

  generate:env:
    desc: Generates a .env file holding all relevant options for a local workspace
    cmds:
      - touch .env
      - truncate -s 0 .env
      - echo "HOST=localhost" >> .env
      - echo "PORT=3000" >> .env
      - echo "JWT_KEY=$(openssl rand -base64 32)" >> .env
    generates:
      - .env

  generate:jwt:
    desc: Generates a valid JWT, which is symmetrically signed by the key stored in .env (JWT_KEY)
    dotenv: [.env]
    silent: true
    preconditions:
      - openssl version
    cmds:
      - |
        jwt_header=$(echo -n '{"alg":"HS256","typ":"JWT"}' | base64 | sed s/\+/-/g | sed 's/\//_/g' | sed -E s/=+$//)
        payload=$(echo -n '{"sub":"arthur.dent"}' | base64 | sed s/\+/-/g |sed 's/\//_/g' |  sed -E s/=+$//)
        secret=$(echo $JWT_KEY)
        hexsecret=$(echo -n "$secret" | xxd -p | tr -d '\n')
        hmac_signature=$(echo -n "${jwt_header}.${payload}" | openssl dgst -sha256 -mac HMAC -macopt hexkey:$hexsecret -binary | base64  | sed s/\+/-/g | sed 's/\//_/g' | sed -E s/=+$//)
        echo "${jwt_header}.${payload}.${hmac_signature}"
